## Задача 1

Страницы в книге пронумерованы последовательно, начиная с 1. Всего в номерах страниц 1578 знаков. Сколько страниц в книге?

Пример: 

В книге 12 страниц, из них 9 страниц с одним знаком (0,1,2...,9) и три с двумя знаками (10, 11, 12). Расчет количества знаков: 1*9 + 3*2 = 15.

n = (1578 - (1*9 + 2*3)) / 3
result = n + 9 + 6
print('Правильный ответ:', int(result))


### Решение

# Так как в номерах страниц 1578 знаков, то можно сделать вывод, что в книге трёхзначное число страниц. 
# Всего 9 страниц с одним знаком, 90 страниц с двумя знаками и n страниц с тремя знаками. 
# Нахождение n: 1*9 + 2*90 + n*3 = 1578             
n = (1578 - (1*9 + 2*90)) / 3             # Нахождение n
result = n + 9 + 90                       # Получение количества страниц в книге
print('Правильный ответ:', int(result))   # Вывод результата
                                          

## Задача 2

В саду растут яблони (всего 5 деревьев). На первой яблоне созрело 13 яблок, на второй 18, на третьей 8, на четвертой 21 и на пятой 20. Создайте список с количеством яблок на каждом дереве. При помощи цикла for, пройдите по списку с количеством яблок на каждом дереве и посчитайте их общую сумму.

spisok = [13, 18, 8, 21, 20]
sum = 0
for i in spisok:
 sum += i
 i += 1
print(sum)


### Решение

spisok = [13, 18, 8, 21, 20]              # Список с количеством яблок на каждом дереве
a = 0                                     # Переменная а для хранения суммы всех яблок
for i in spisok:                          # Проход циклом по списку
  a += i                                  # Добавление в переменную яблок с каждого дерева
print(a)                                  # Вывод результата

## Задача 3

Напишите программу, которая берет список чисел (например, a_list = [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]) и составляет новый список только из первого и последнего элементов данного списка.




lst = [2, 5, 9, 132, 17]
lst_new = [lst[0], lst[-1]]
print(lst_new)

### Решение

# Создание списка чисел
a_list=[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]
# Создание списка из первого и последнего элементов
list_index = [a_list[0], a_list[-1]]
# Вывод результата
list_index

## Задача 4

Создайте список из десяти элементов от 15 до 25 (не включая число 25) с помощью цикла for.


lst = []
for i in range(15, 25):
  lst.append(i)
print(lst)

### Решение

a = []                                    # Создание пустого списка
for i in range(15, 25):                   # Для чисел от 15 (вкл.) до 25 (не вкл.)
    a.append(i)                           # Добавление числа в список а
print(a)                                  # Вывод получившегося списка

## Задача 5

Посчитайте площадь поверхности шара, с радиусом R = 7, число pi = 3.14

from re import S
R = 7
pi = 3.14
S = 4 * pi * R**2
print(S)

### Решение

R = 7                                     # Радиус
pi = 3.14                                 # Число Пи
s = 4 * pi * R**2                         # Площадь поверхности шара по формуле
print(s)                                  # Вывод результата

## Задача 6

Дан список элементов. Выведите первый и последний элемент списка.

a = ['Нулевой элемент', 2, 5, 8, (3.5,55)]

a = ['Нулевой элемент', 2, 5, 8, (3.5,55)]
print(a[0])
print(a[-1])

### Решение

print('Первый элемент;',a[0])             # Вывод первого элемента списка
print('Последний элемент:',a[-1])         # Вывод последнего элемента списка

## Задача 7

Создайте переменную с именем pervaya и значением 100. 

На следующей строке создайте новую переменную с именем vtoraya и значением 12.123445643.

С помощью функции print() напишите фразу: 100 - 12.123445643 равно 87.876554357

Воспользуйтесь именами переменных для решения задания

pervaya = 100
vtoraya = 12.123445643
print(pervaya, "-", vtoraya, "=", pervaya-vtoraya)

### Решение

# Создание переменной с именем pervaya и присвоение ей значения 100
pervaya = 100 
# Создание переменной с именем vtoraya и присвоение ей значения 12.123445643
vtoraya = 12.123445643
# Верный вариант вывода, но без использования переменных
print("100 - 12.123445643 равно 87.876554357") 
# Верный вариант вывода с использованием переменных
print(pervaya,"-", vtoraya,"равно", pervaya - vtoraya) 

## Задача 8

Создайте переменную с произвольным именем и запишите в нее значение 123.

Создайте еще одну переменную, также с произвольным именем, и запишите в нее значение '123' (в кавычках)

С помощью функции print() выведите на экран сначала значение первой переменной, а затем второй (каждый print на новой строке)

one_v = 123
two_v = '123'
print (one_v)
print (two_v)

## Задача 9

Обратите внимание на результут прошлой задачи. В обоих случаях вывелось одно и то же значение: 123. Но это разные переменные. Давайте это проверим.

С помощью функций type() и print() выведите сначала тип переменной one_v, а затем тип переменной two_v. 

one_v = 123
two_v = '123'
print(type(one_v))  
print(type(two_v))

### Решение

print(type(one_v))                        # Вывод типа переменной one_v
print(type(two_v))                        # Вывод типа переменной two_v

## Задача 10

Чтобы посчитать какое-то выражение (например, 5 + 5, или 9 - 2/4 и т.д.) напишите это выражение и запустите ячейку. Знак "+" - это сложение, "-" - это вычитание, "*" - это умножение, "/" - это деление. Напишите любой собственный пример.


3 + 6*2

### Решение

# Разность 7 и произведения 2 на 2
7 - 2*2

# Сумма 3 и 2
3 + 2

## Задача 11

Напишите логическое выражение (например, 6 > 5 или 4 <= 10) и запустите ячейку. Если выражение верное, то программа выведет слово True, если неверное False.


6 > 5

### Решение

# True, так как 5 больше 3
5 > 3

# True, так как 6 не равно 9
6 != 9

# False, так как 5 больше 4
5 <= 4

## Задача 12

Дети затеяли игру "Казаки-разбойники" по своим правилам. Следуя им, вы должны написать небольшую программу, которая будет вам помогать:
* Если кол-во игроков будет нечётное, то выведите "Пойду позову еще одного друга"
* Если кол-во игроков чётное, и принадлежит интервалу от 5 до 10 (вкл.), то выведите "Начинаем игру"
* Если кол-во игроков чётное, но больше 10, то выведите "Придётся разделиться на 2 группы"
* Если кол-во игроков чётное, но меньше 5, то выведите "Зовём еще друзей!"

Используя функцию input, считайте кол-во игроков. Программа должна вывести результат проверки этого числа.

num = int(input())
if num < 5:
  print('get call new frends')
elif num % 2 != 0:
  print('call one frend')
elif 5 <= num <= 10:
  print('get start')
elif num > 10:
  print('get split group')

### Решение

# Запрос у пользователя числа игроков
num = int(input())
if num % 2 == 0:                          # Проверка четности числа
    if 5 <= num <= 10:                    # Проверка принадлежности интервалу от 5 до 10
        print('Начинаем игру')            # Вывод условия 'Начинаем игру'
    elif num > 10:                        # Проверка условия о том, что количество игроков больше 10
        # Вывод условия 'Придётся разделится на 2 группы'
        print('Придётся разделится на 2 группы')
    else:
        print('Зовём еще друзей')         # Вывод условия 'Зовём еще друзей'
else:
    # Вывод условия 'Пойду позову еще одного друга'
    print('Пойду позову еще одного друга')

## Задача 13

Вы читаете книжгу про Геракла и дошли до момента, где он сражается с Лернейской гидрой - монстром, что живёт в болоте. Подойдя к ней, Геракл увидел у неё 9 голов. Одним взмахом своего меча он отрубил ей все 9 голов, но на месте прошлых голов появилось в 2 раза больше (18). Потом он еще раз их отрубил, и теперь количество голов стало еще в 2 раза больше (36). Так он за один взмах меча отрубал все головы, которые у неё отрастали. Он сделал 6 взмахов своим большим мечом, прежде, чем понял, как её убить. А сколько всего он отрубил ей голов? 

*Используя цикл while, посчитайте сколько всего голов отрубил Геракл гидре, если за каждый взмах меча он отрубает все головы, а каждая голова заменяется двумя другими. Взмахов меча он сделал 6. Изначально у гидры было 9 голов.*

i = 0
heads = 9
cut_heads = 0
while i < 6:
  cut_heads += heads
  heads *= 2
  i += 1
print(cut_heads)

i = 0                                     # Количество взмахов
heads = 9                                 # Количество голов 
cut_heads = 0                             # Количество отрубленных голов
while i < 6:                              # Пока количество взмахов меньше 6
    cut_heads += heads                    # Увеличение количества отрубленных голов вдвое 
    heads *= 2                            # Увеличение голов гидры вдвое
    i += 1                                # Увеличение количества взмахов на 1
print(cut_heads)                          # Вывод результата



## Задача 14

Мама попросила вас каждый день записывать, сколько страниц в день читаете. Вы это сделали, но теперь не знаете, как посчитать, сколько прочитали страниц за всё время, ведь книги вы читали разные.

*Используя цикл for пройдите по списку и посчитайте суммарное кол-во страниц, которые вы прочитали за всё время. (Использовать встроенные функции sum, len,sort и т.д запрещено)*

page_nums = [52, 12, 64, 324, 75, 32, 64, 12, 7, 31, 56, 12, 34, 1, 3, 73, 2]

pages = 0
page_nums = [52, 12, 64, 324, 75, 32, 64, 12, 7, 31, 56, 12, 34, 1, 3, 73, 2]
for i in page_nums:
    pages += i
pages

### Решение:

pages = 0                                 # Количество страниц
for i in page_nums:                       # Перебор всех значений списка
    pages += i                            # Добавление значения к сумме страниц  
pages                                     # Вывод результата

## Задача 15

Вы посчитали, сколько прочитали страниц, но решили похвастаться, сколько можете прочитать за один день. Но самому трудно определить, какое количество страниц в записях было наибольшим.

Используя цикл for пройдите по списку page_nums, который был определен выше, и найдите наибольшее число прочитанных страниц. (Использовать встроенные функции max, min и т.д запрещено)

*например, для списка [4,1,5,2,2] наибольшее число - 5*

page_nums = [52, 12, 64, 324, 75, 32, 64, 12, 7, 31, 56, 12, 34, 1, 3, 73, 2]
page = page_nums [0]
for i in page_nums:
  if i > page:
    page = i
page

### Решение

page = page_nums[0]                       # Выбор первого значения в списке наибольшим
for i in page_nums:                       # Перебор значений списка
    if i > page:                          # Проверка условия: если текущее значение больше 
        page = i                          # Присвоение максимальному элементу текущего 
page                                      # Вывод результата

## Задача 16

Чтобы точно быть в курсе всех прочитанных и недочитанных книг, создайте словарь, который будет хранить в себе название книги(ключ), которую вы читаете, и кол-во страниц (значение), которое вы прочитали.
Вы читали: "Приключение Тома Сойера" - 133 страницы, "Малыш и Карлсон" - 62 страницы, "Война и мир" - 5 страниц, "Сказка о рыбаке и рыбке" - 15 страниц.

После определённого периода вы начали читать новую книжку - "Колобок", где прочитали только 10 страниц. Так как у вас уже был создан словарь, добавьте в него новую книжку с его значением.

*Создайте словарь, который будет соответствовать заданным условиям. Используя метод .update дополните ваш словарь новой книгой, которая указана выше.*

book_dict = {'Приключение Тома Сойера': 133, 'Малыш и Карлсон': 62, 'Война и мир': 5, 'Сказка о рыбаке и рыбке': 15}
print(book_dict)
book_dict.update({'Колобок':10})
print(book_dict)


### Решение

# Создание словаря с заданными значениями
book_dict = {'Приключение Тома Сойера': 133, 'Малыш и Карлсон': 62, 'Война и мир': 5, 'Сказка о рыбаке и рыбке': 15}
print(book_dict)                          # Вывод словаря
book_dict.update({'Колобок':10})          # Добавление в словарь новой пары "ключ-значение"
print(book_dict)                          # Вывод обновленного словаря

## Задача 17

Напишите программу , которая запрашивает у пользователя длинную строку, содержащую несколько слов. Выведите на экран исходную строку, в которой слова идут в обратном порядке.
*Например: My name is Michele - Michele is name My*

a = 'My name is Vladimir'
' '.join(a.split()[::-1])


### Решение

a = 'My name is Michele'                  # Строка
' '.join(a.split()[::-1])                 # Вывод строки наоборот

## Задача 18

Бригадиру нужно посчитать количество деталей, которые сделала бригада за рабочий день. Каждый работник передает бригадиру список, в котором он в течение дня записывал количество готовых деталей. 


*   spisok_1 = [1,2,4,2,4,5,2,3,2]
*   spisok_2 = [4,2,3,2,1,4,2,5,2,5]
*   spisok_3 = [2,4,1,2,4,5,4,5]

Используя цикл for посчитайте количество деталей сделанных за день.

from string import printable
spisok_1 = [1,2,4,2,4,5,2,3,2]  
spisok_2 = [4,2,3,2,1,4,2,5,2,5]
spisok_3 = [2,4,1,2,4,5,4,5]

new_list = spisok_1 + spisok_2 + spisok_3
s = 0
for i in new_list:
  s += i
print(s)

### Решение

                                          
spisok_1 = [1,2,4,2,4,5,2,3,2]            # Список первого рабочего
spisok_2 = [4,2,3,2,1,4,2,5,2,5]          # Список второго рабочего
spisok_3 = [2,4,1,2,4,5,4,5]              # Список третьего рабочего

new_list = spisok_1 + spisok_2 + spisok_3 # Объединенный список
s = 0                                     # Общее количество деталей

for i in new_list:                        # Перебор всех значений списка
  # Увеличение общего количества деталей на текущее значение списка
  s += i                                  
print(s)                                  # Вывод результата

## Задача 19

Посчитайте сумму всех четных чисел от 0 до 30.

s = 0
for i in range(0, 30, 2):
  s += i
print(s)

### Решение

s = 0                                     # Переменная для хранения суммы
for i in range(0, 30, 2):                 # Перебор элементов списка с шагом 2
  s += i                                  # Увеличение суммы на каждый второй элемент
print(s)                                  # Вывод результата

## Задача 20

Несколько человек собрались играть в карточную игру. Правила следующие: игроки по очереди тянут 3 карты. Для победы в этой игре сумма очков за набранные карты должна быть минимальна.<br>
Напишите функцию, возвращающую количество очков у игрока-победителя. Количество очков за младшие карты равно их номиналу, а за старшие - от 11 до 14 за карты от валета до туза ('J', 'Q', 'K', 'A') соответственно.<br>
Игроки собрали карты, указанные в следующем списке (i-ый элемент списка содержит набор карт i-го игрока):<br>
[['A', 'J', '2'], ['10', '10', '7'], ['J', 'J', '3'], ['4', 'A', 'A'], ['6', '7', 'A']].<br>
Cколько очков набрал победивший игрок?

# Список карт каждого из игроков
hands_list = [['A', 'J', '2'], ['10', '10', '7'], ['J', 'J', '3'], ['4', 'A', 'A'], ['6', '7', 'A']]

hands_list = [['A', 'J', '2'], ['10', '10', '7'], ['J', 'J', '3'], ['4', 'A', 'A'], ['6', '7', 'A']]
mapping = {'J': 11, 'Q': 12, 'K': 13, 'A': 14}
def calculate_sum(cards_list):
  sum = 0
  for card in cards_list:
    try:
      points = int(card)
    except:
      points = mapping[card]
    sum += points
  return sum
def calculate_min(hands_list):
  sums_list = [calculate_sum(cards_list) for cards_list in hands_list]
  return min(sums_list) 
print(calculate_min(hands_list))


### Решение

# Словарь, содержащий значения старших карт 
mapping = {'J': 11, 'Q': 12, 'K': 13, 'A': 14}

# Функция подсчёта суммы в списке карт
# Возвращает сумму карт текущего списка
def calculate_sum(cards_list):
    sum = 0                                   # Переменная для хранения суммы
    for card in cards_list:                   # Перебор карт в списке
        try:  
            # Если младшая карта, значение можно преобразовать в тип int                                 
            points = int(card)
        except:
            # Если старшая карта, значение  берется из словаря
            points = mapping[card]
        sum += points                         # Увеличиваем сумму на текущее значение 
    return sum                               

# Функция нахождения игрока с минимальной суммой карт
# Возвращает минимальный элемент из списка, содержащего суммы карт каждого игрока
def calculate_min(hands_list):
    # Создание списка, содержащего суммы карт каждого игрока
    sums_list = [calculate_sum(cards_list) for cards_list in hands_list]
    return min(sums_list)                    

print(calculate_min(hands_list))              # Вызов функции нахождения победителя

## Задача 21

Из заданной последовательности сохраните четные числа в список, и посчитайте его длину.

# Список чисел
num = [386, 462, 47, 418, 907, 344, 375, 823,
       566, 328, 626, 949, 687, 248, 6, 7, 14]

num = [386, 462, 47, 418, 907, 344, 375, 823, 566, 328, 626, 949, 687, 248, 6, 7, 14]
lst = []
for i in num:
  if i % 2 == 0:
    lst.append(i)
print(lst)
print(len(lst))

### Решение

a = []                                    # Создание списка для хранения четных чисел
for i in num:                             # Перебор значений заданного списка
  if i % 2 == 0:                          # Проверка условия четности
    a.append(i)                           # Добавление четных элементов в список

print('Четные числа: ',a)                 # Вывод списка с четными элементами
print('Длина полученного списка:',len(a)) # Вывод количества элементов получившегося списка

## Задача 22

Напишите программу, которая считывает со стандартного ввода целые числа, по одному числу в строке, и после первого введенного нуля выводит сумму полученных на вход чисел.

*Например: для последовательности 5, 2, 1, 0 результат должен быть 8*

sum = 0
temp = 1
while temp != 0:
  temp = int(input())
  sum += temp
else: print(sum)

### Решение

count = 0                                 # Переменная для хранения суммы  
# Переменная для введенных чисел, равна 1 для захода в цикл while                             
inp = 1                                    

while inp != 0:                           # Пока введенное число не равно 0
    inp = int(input())                    # Запрос у пользователя нового числа
    count += inp                          # Увеличение суммы на введенное число
else: print(count)                        # Вывод результата


## Задача 23

Вы находитесь в отпуске в городе Майами и вам необходимо посчитать на каком такси будет дешевле доехать из Аэропорта до Отеля. 
На каком такси будет дешевле доехать до отеля?
*Посчитайте с помощью Python сумму для всех перевозчиков такси и выберите самый дешевый вариант.*

*   Uber - От Аэропорта до Отеля проездка стоит 15 долларов + налог 3 доллара, плюс чаевые 10%;
*   Lyft - От Аэропорта до Отеля поездка стоит 14 долларов + налог 2.5 доллара, плюс чаевые 8%;
*   Hailo - От Аэропорта до Отеля поездка стоит 16 долларов + налог 3.5 доллара, плюс чаевые 9%;
*   Easy Taxi - От Аэропорта до Отеля поездка стоит 20 долларов + налог 5 долларов, плюс чаевые 12%;
*   Gett - От Аэропорта до Отеля поездка стоит 17 долларов + налог 4 долларов, плюс чаевые 11%

*С помощью функции round, необходимо округлить число до одного знака после запятой.*




road_u = 15
tax_u = 3
tips_u = 10
uber = (road_u + tax_u)+(road_u + tax_u)*(tips_u/100)
print('Стоимость поездки в Uber равна ', round(uber, 1), 'долларов')
road_u = 14
tax_u = 2.5
tips_u = 8
lyft = (road_u + tax_u)+(road_u + tax_u)*(tips_u/100)
print('Стоимость поездки в Lyft равна ', round(lyft,1), 'долларов')
road_h = 16
tax_h = 3.5
tips_h = 9
hailo = (road_h + tax_h) + (road_h + tax_h) * (tips_h/100)
print('Стоимость поездки в Hailo равна ', round(hailo, 1), 'долларов')
road_e = 20
tax_e = 5
tips_e = 12
easy = (road_e + tax_e) + (road_e + tax_e) * (tips_e/100)
print('Стоимость поездки в Easy Taxi равна ', round(easy, 1), 'долларов')
road_g = 17
tax_g = 4
tips_g = 11
gett = (road_g + tax_g) + (road_g + tax_g) * (tips_g/100)
print('Стоимость поездки в Gett равна ', round(gett, 1), 'долларов')
print('Наименьшая цена у Lyft')

### Решение

# Расчет поездки на такси Uber
road = 15                                  # Стоимость поездки
tax = 3                                    # Налог
tips = 10                                  # Чаевые
# Общая стоимость поездки
price_uber = (road + tax) * (1 + (tips/100))
# Вывод результата
print('Стоимость поездки на такси Uber:', round(price_uber, 1))

# Расчет поездки на такси Lyft
road = 14                                  # Стоимость поездки
tax = 2.5                                  # Налог
tips = 8                                   # Чаевые
# Общая стоимость поездки
price_lyft = (road + tax) * (1 + (tips/100))
# Вывод результата
print('Стоимость поездки на такси Lyft:', round(price_lyft, 1))

# Расчет поездки на такси Hailo
road = 16                                  # Стоимость поездки
tax = 3.5                                  # Налог
tips = 9                                   # Чаевые
# Общая стоимость поездки
price_hailo = (road + tax) * (1 + (tips/100))
# Вывод результата
print('Стоимость поездки на такси Hailo:', round(price_hailo, 1))

# Расчет поездки на такси Easy Taxi
road = 20                                  # Стоимость поездки
tax = 5                                    # Налог
tips = 12                                  # Чаевые
# Общая стоимость поездки
price_easy = (road + tax) * (1 + (tips/100))
# Вывод результата
print('Стоимость поездки на такси Easy Taxi:', round(price_easy, 1))

# Расчет поездки на такси Gett
road = 17                                  # Стоимость поездки
tax = 4                                    # Налог
tips = 11                                  # Чаевые
# Общая стоимость поездки
price_gett = (road + tax) * (1 + (tips/100))
# Вывод результата
print('Стоимость поездки на такси Easy Taxi:', round(price_gett, 1))

##Задача 24

Дан список фамилий:

    Иванов, Петров, Андреев, Сидоров, Яшин, Смирнов

Отсортируйте их в алфавитном порядке.


# Список фамилий
name = ['Иванов', 'Петров', 'Андреев', 'Сидоров', 'Яшин', 'Смирнов']

name = ['Иванов', 'Петров', 'Андреев', 'Сидоров', 'Яшин', 'Смирнов']
name.sort()
print('Sorted list: ', name)


### Решение

name.sort()                                # Сортировка списка
print(name)                                # Вывод результата

## Задача 25






Напишите код, который находит расстояние между двумя точками на плоскости по координатам этих точек. Найдите расстояние между точками с координатами (2,4) и (7,11) и округлите ответ до десятых.

from math import sqrt
x = (2, 4)
y = (7, 11)
distantion = sqrt((x[0]-y[0])**2 + (x[1]-y[1])**2)
print(round(distantion, 1))


### Решение

from math import sqrt                     # Импорт квадратного корня
a = (2, 4)                                # Координаты первой точки
b = (7, 11)                               # Координаты второй точки
# Расчет расстояния между точками
dist = sqrt((a[0] - b[0])**2 + (a[1] - b[1])**2) 
dist                                      # Вывод результата



## Задача 26

С помощью цикла for выведите на экран все четные числа от 1 до 10 (можно воспользоваться заданием шага цикла)

for i in range(0, 11, 2):
  print(i)


### Решение

# Создание последовательности от 2 до 10 (11 не включается) с шагом 2
for i in range(2, 11, 2): 
  print(i) # Вывод на экран значения i

## Задача 27

Создайте список, в котором будут перечислены времена года.

Создайте переменную с именем nomer (присвойте ей произвольное значение (можно просто 0)).

Используя цикл for, пройдите по всем элементам списка. На каждом шаге увеличивайте значение переменной nomer на 1. Как только попадется элемент со значением "Лето" - выведите на экран переменную nomer.

После выхода из цикла с помощью функции print() выведите значение пременной nomer.

nomer = 0
spisok = ['зима', 'весна', 'лето', 'осень']
for i in spisok:
  nomer += 1
  if i == 'лето':
    print(nomer)

### Решение

# Создание списка с временами года
seasons = ['Зима', 'Весна', 'Лето', 'Осень'] 
nomer = 0                                   # Создание переменной nomer
for i in seasons:                           # Перебор всех элементов списка 
  nomer += 1                                # Увеличение переменной на 1
  if i == 'Лето':                           # Проверка текущего элемента на соответствие условию
    print(nomer)                            # Вывод значения переменной nomer на экран

## Задача 28

Создайте две переменные с произвольными именами (выберите сами). В первую переменную запишите ваш возраст, во вторую текущий год (2020). С помощью функции print() выведите год вашего рождения. 

v = 64
t = 2022
print(t - v)

### Решение

                                          3
vozrast = 32                              # Создание переменной с возрастом
god = 2021                                # Создание переменной с текущим годом
print(god - vozrast)                      # Вывод года рождения

## Задача 29

Создайте список month месяцев года.

Создайте список season времен года.

Выведите списки на экран.

Используя созданные списки month и season, создайте словарь year, где ключи словаря - времена года, а значения ключей - списки месяцев для каждого времени. Обращением к ключу созданного словаря выведите все месяцы лета.


month = ['декабрь', 'январь','февраль','март','апрель','май','июнь','июль','август','сентябрь','октябрь','ноябрь']
season = ['зима', 'весна', 'лето', 'осень']
print(month)
print(season)
year = {}
for i in range(3, len(month)+1, 3):
  year.update({season[i//3-1]:month[i-3:i]})
print(year)
print(year['лето'])

### Решение

# Создание словаря с месяцами
month = ['декабрь', 'январь', 'февраль', 'март', 'апрель', 'май', 'июнь', 'июль', 'август', 'сентябрь', 'октябрь', 'ноябрь']
# Создание словаря с временами года
season = ['Зима', 'Весна', 'Лето', 'Осень']
# Вывод словарей
print(month)
print(season)

year = {}                                 # Создание пустого словаря
for i in range(3, len(month)+1, 3):       # Перебор значений первого словаря по три значения
    # Составление нового словаря с заданным условием
    year.update({season[i//3-1]:month[i-3:i]})
year                                      # Вывод результата

year['Лето']

## Задача 30

Вы решили узнать, как у компьютера может загружаться память и подумали, что можно вывести результат его внутренней памяти таким образом:

*Вывод должен быть таким*

0

1 0 0

2 1 1 0 0

3 2 2 1 1 0 0

4 3 3 2 2 1 1 0 0

5 4 4 3 3 2 2 1 1 0 0

*Выведите такую последовательность строк. (Забивать вручную нельзя)*


num = '0'                                
for i in range(6):                         
    print(num)                            
    num = str(i+1) + ' ' + str(i) + ' ' + num

### Решение

num = '0'                                 # Создание строки с одним символом "0"
for i in range(6):                        # Перебор значений от 0 до 5 включительно 
    print(num)                            # Вывод строки
    # Преобразование текущей строки для соответствия условию
    num = str(i+1) + ' ' + str(i) + ' ' + num

## Задача 31

В школьной столовой  один полноценный обед стоит 120 рублей. Вы решили с ребятами скинуться на общий обед, но у вас только 1000 рублей. Чтобы понять, сколько вам нужно потратить и сколько обедов вы получите, вы выводите таблицу стоимостей и количества обедов, что вы получите. Максимальное количество обедов - 10. 

Вывод должен быть таким

1 * 120 = 120

2 * 120 = 240

.....

9 * 120 = 1080

10 * 120 = 1200

*Выведите такую последовательность строк.*


for i in range(1, 11):
  print('{} * {} = {}'.format(i, 120, i*120))

### Решение

for i in range(11):                       # Перебор значений от 0 до 10 
    # Вывод заданного выражения                    
    print('{} * {} = {}'.format(i, 120, i * 120))

## Задача 32

Представьте, что вам приходят 2 письма: первое письмо с чеком-зарплатой, второе письмо со счётом квартплаты. Считайте с входящей строки 2 числа - salary и rent. Проверьте условия введённых значений. Если у вас зарплата меньше, чем квартплата, то выведите на экран строку "Ошибка! Или меняйте работу, или меняйте место жительства!". В противном случае проверяйте: Если разница зарплаты и квартплаты 15-30 тысяч, то выводите на экран: "Можно жить спокойно". Если разница больше, чем 30 тысяч, то выводите "Можно брать ипотеку!)". В противном случае выводите "В этом месяце живём на макаронах....".

salary = int(input())
rent = int(input())
rem = salary - rent
if rem < 0:
  print('Ошибка! Или меняйте работу, или меняйте место жительства!')
elif 15000 <= rem <= 30000:
  print('Можно жить спокойно')
elif rem > 30000:
  print('Можно брать ипотеку!')
else:
  print('В этом месяце живём на макаронах...')

### Решение

salary = int(input())                     # Запрос у пользователя первого числа
rent = int(input())                       # Запрос у пользователя второго числа
if salary >= rent:                        # Сравнение зарплаты и квартплаты 
    diff = salary - rent                  # Вычисление разности зарплаты и квартплаты
    if 150000 <= diff <= 30000:           # Если разность находится в заданном пределе
        print('Можно жить спокойно')      # Вывод соответствующего сообщения
    elif diff > 30000:                    # Если разность больше
        print('Можно брать ипотеку!)')    # Вывод соответствующего сообщения  
    else:                              
        # Вывод соответствующего сообщения
        print('В этом месяце живём на макаронах....')
else:
    # Вывод соответствующего сообщения
    print('Ошибка! Или меняйте работу, или меняйте место жительства!')

## Задача 33

Найдите среднее арифметическое всех четных чисел в списке


my_list = [36, 76, 59, 11, 84, 86, 70, 32, 16,  7, 91, 25, 35, 94, 57, 77, 18, 42, 44, 69, 65, 30, 90, 78, 47, 78, 95, 58,  1, 95]



my_list = [36, 76, 59, 11, 84, 86, 70, 32, 16, 7, 91, 25, 35, 94, 57, 77, 18, 42, 44, 69, 65, 30, 90, 78, 47, 78, 95, 58, 1, 95]
my_list_2 = []
sum = 0
for i in my_list:
  if i%2 == 0:
    my_list_2.append(i)
for i in my_list_2:
  sum = sum + i
arifm = sum/len(my_list_2)
print(arifm)

### Решение

s = []                                    # Создание пустого списка для четных чисел
for i in my_list:                         # Перебор элементов заданного списка
  if i % 2 == 0:                          # Проверка четности элемента
    s.append(i)                           # Добавление в список четных чисел
summa = sum(s)/len(s)                     # Нахождение среднего арифметического
print(summa)                              # Вывод результата

## Задача 34

Напишите код с помощью циклов, который находит остаток от деления одного числа на другое. Нельзя пользоваться операторами деления и нахождения остатка. Для пар чисел из списка numbers найдите сумму остатков от деления первого числа в каждой паре на второе.




numbers=[(29,3),(500,11),(754,33),(22,9),(117,55),(220,20),(375,31),(189,13)]

numbers=[(29,3),(500,11),(754,33),(22,9),(117,55),(220,20),(375,31),(189,13)]
sum = 0
for pair in numbers:
  i = 0 
  while (i + 1)*pair[1] <= pair[0]: 
    i += 1 
  sum += pair[0] - i*pair[1]
sum       


### Решение

sum = 0                                   # Сумма всех остатков
for pair in numbers:                      # Перебор всех пар
  i = 0 
  # Увеличение i на 1 до тех пор, пока произведение i на делитель не станет 
  # отличаться от делимого на число, меньшее или равное делителю
  while (i + 1)*pair[1] <= pair[0]: 
    i += 1 
  sum += pair[0] - i*pair[1]              # Добавление остатка к сумме
sum                                       # Вывод результата

## Задача 35

В строю стоят 20 солдат по росту. Рост первого 195 см, а остальные на 1 см меньше предыдущего (195, 194, 193 и т.д.). Посчитайте каким по счету стоит солдат, рост которого 183 см (можно посчитать при помощи циклов).

n = 0
for i in range(195, 182, -1):
  n += 1
if i == 183:
  print('В строю солдат стоит', n)

### Решение

a = 0                                     # Номер солдата 
for i in range(195, 175, -1):             # Перебор значений роста каждого солдата
    a += 1                                # Увеличение счетчика солдат
    if i == 183:                          # Проверка выполнения заданного условия
        print('Солдат по счету', a)       # Вывод номера этого солдата

## Задача 36

Вы - тренер футбольной команды и по результатам сезона решили наградить игроков, забивших не менее 60 голов. Используя исходный словарь, создайте словарь с игроками, которых следует наградить, и в бланк ответа внесите суммарное количество голов, которое забили эти игроки.


# Исходный словарь
scores = {'Lionel Messi': 75,
          'Zlatan Ibrahimovic': 58,
          'Robert Lewandowski': 33, 
          'Cristiano Ronaldo': 28,
          'Karim Benzema': 62,
          'Vasili Berezutski': 1,
          'Neymar': 70, 
          'Edinson Cavani':45,
          'Toni Kroos': 13,
          'Thiago Silva': 20,
          'Gianluigi Buffon': 0} 

scores = {'Lionel Messi': 75,
          'Zlatan Ibrahimovic': 58,
          'Robert Lewandowski': 33, 
          'Cristiano Ronaldo': 28,
          'Karim Benzema': 62,
          'Vasili Berezutski': 1,
          'Neymar': 70, 
          'Edinson Cavani':45,
          'Toni Kroos': 13,
          'Thiago Silva': 20,
          'Gianluigi Buffon': 0} 
scores_2 = {key:value for (key, value) in scores.items() if value >= 60} 
print('Игроки, забившие не менее 60 голов: ', scores_2)
sum  = 0
for (key, value) in scores_2.items():
    sum += value    
print('Суммарное количество голов этих игроков: ', sum)

### Решение

print("Игроки, забившие не менее 60 голов:")
# Отбор игроков, забивших не менее 60 голов
filtered_dictionary = {key:value for (key, value) in scores.items() if value >= 60} 
# Вывод игроков, забивших не менее 60 голов
print(filtered_dictionary) 
sum  = 0
# Перебор всех значений словаря
for (key, value) in filtered_dictionary.items():
    # Увеличение суммы на текущее значение
    sum += value    
# Вывод результата
print('Суммарное количество голов этих игроков: ', sum)

## Задача 37

"Теорема пифагора"

С помощью функции input() попросите пользователя ввести длину первого катета и сохраните значение в переменной katet1.

С помощью функции input() попросите пользователя ввести длину второго катета и сохраните значение в переменной katet2.

Создайте переменную gipotenusa и запишите в него значение, которое расчитывается по правилу: квадрат гипотенузы равен сумме квадратов катетов.

Выведите на экран значение гипотенузы.

katet1=int(input())
katet2=int(input()) 
gipotenusa = (katet1**2 + katet2**2)** 0.5
print(gipotenusa)




### Решение

# Запрос у пользователя длины первого катета
katet1 = int(input("Введите длину первого катета: ")) 
# Запрос у пользователя длины второго катета
katet2 = int(input("Введите длину первого катета: ")) 
# Расчет значения гипотенузы. ( ** 2 - квадрат числа, ** 0.5 - корень числа)
gipotenusa = (katet1**2 + katet2**2)**0.5 
# Вывод результата
print(gipotenusa)

## Задача 38

Создайте список с животными китайского гороскопа (12 штук).

Попросите пользователя ввести год его рождения.

Ваша задача в ответном сообщении с помощью функции print() сказать пользователю, кто он по гороскопу.

goroskop = ['Крыса', 'Бык', 'Тигр', 'Кролик', 'Дракон', 'Змея', 'Лошадь', 'Коза', 'Обезьяна', 'Петух', 'Собака', 'Свинья']
god = int(input('Введите год своего рождения:'))
index = (god - 4) % 12
print(goroskop[index])





### Решение

# Создание списка с животными гороскопа
goroskop = ['Крыса', 'Бык', 'Тигр', 'Кролик', 'Дракон', 'Змея', 'Лошадь', 'Коза', 'Обезьяна', 'Петух', 'Собака', 'Свинья'] 
# Запрос у пользователя года рождения
god = int(input('Введите год Вашего рождения: ')) 
# Животные размещены в списке таким образом, что нужно вычесть число 4 и взять остаток от деления на 12 
index = (god - 4) % 12 
# Вывод результата
print(goroskop[index]) 

## Задача 39

1. Создайте список, в котором будут храниться цвета радуги (красный, оранжевый, желтый, зеленый, голубой, синий, фиолетовый). 
2. С помощью функции input попросите пользователя ввести число от 0 до 6. 
3. С помощью функции int() преобразуйте введенный пользователем символ в число
4. С помощью функции print выведите цвет радуги под номером, который ввел пользователь. 

list = ['красный', 'оранжевый', 'желтый', 'зеленый', 'голубой', 'синий', 'фиолетовый']
symbol = input('Введите число от 0 до 6: ')
number = int(symbol)
print(list[number])

### Решение

# Создание списка цветов
spisok = ['красный', 'оранжевый', 'желтый', 'зеленый', 'голубий', 'синий', 'фиолетовый']
# Запрос у пользователя числа
symbol = input ('Введите число от 0 до 6: ')
# Изменене типа введенных данных
chislo = int(symbol)
# Вывод результата
print(spisok[chislo])

# Можно сразу так
spisok = ['красный', 'оранжевый', 'желтый', 'зеленый', 'голубий', 'синий', 'фиолетовый']
symbol = int(input ('Введите число от 0 до 6: '))
print(spisok[symbol])

## Задача 40

Напишите программу, которой на вход будет подаваться число от 0 до 9 при помощи input(). На выходе должно выводиться сообщение с текстовым написанием этого числа(0 - ноль, 1 - один, 2 - два и т.д.)

x = int(input('введите число от 0 до 9: '))
if x == 0:
  print('ноль')
elif x == 1:
  print('один')
if x == 2:
  print('два')
if x ==3:
  print('три')
if x == 4:
  print('четыре')
if x == 5:
  print('пять')
if x == 6:
  print('шесть')
if x == 7:
  print('семь')
if x == 8:
  print('восемь')
if x == 9:
  print('девять')

### Решение

# Запрос у пользователя числа
N = int(input('Введите число от 1 до 9: '))
# Список буквенных обозначений цифр
list_str = ['ноль', 'один', 'два', 'три', 'четыре', 'пять', 'шесть', 'семь', 'восемь', 'девять']
# Вывод результата
print('Ваше число', list_str[N])

## Задача 41

Создайте список my_list, состоящий из целых чисел от 0 до 20 включительно. Найдите четные и нечетные числа в этом списке.  
Создайте словарь my_dict, в котором по ключам even и odd будут доступны соответственно четные и нечетные числа из списка my_list.

my_list = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
my_dict = dict()
even = []
odd = []

for i in my_list:
  if i % 2 == 0:
    even.append(i)
  else:
    odd.append(i)
my_dict['even'] = even
my_dict['odd'] = odd
print(my_dict['even'])
print(my_dict['odd'])

### Решение





my_list = [i for i in range(21)]          # Создание списка от 0 до 20

my_dict = dict()                          # Создание словаря
even = []                                 # Создание списка для хранения четных чисел
odd = []                                  # Создание списка для хранения нечетных чисел

for i in my_list:                         # Перебор значений списка
    if i % 2 == 0:                        # Проверка четности
        even.append(i)                    # Добавление в список четных чисел
    else:                                 # 
        odd.append(i)                     # Добавление в список нечетных чисел

my_dict['even'] = even                    # Добавление в словарь списка четных чисел
my_dict['odd'] = odd                      # Добавление в словарь списка нечетных чисел

print(my_dict['even'])                    # Вывод результатов
print(my_dict['odd'])                     

## Задача 42

Возьмите список list_1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]. В цикле создайте новый список, используя текущий, но только из четных значений, где значения стоят в обратном порядке от большего к меньшему.

# Список
list_1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

list_1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
list_2 = []
for i in range(len(list_1), 1, -2):
  list_2.append(i)
list_2


### Решение

list_2 = []                               # Создание пустого списка
for i in range(len(list_1), 1, -2):       # Перебор значений списка в обратном порядке с шагом 2
  list_2.append(i)                        # Добавление значений в новый список
list_2                                    # Вывод результата

## Задача 43

Сгенерируйте случайное число от 1 до 9 (включая 1 и 9) при помощи `rd = np.random.randint(1, 9)`. Попросите пользователя угадать число, а затем скажите ему, угадал ли он число, ошибся в меньшую сторону или в большую.



import random
a=1
b=9
random_range = random.randint(a, b)
guess = 0                                
c = 0
while guess != random_range and guess != "exit":
  guess = input("Введите число от 1 to 9: ")
  if guess == "exit":                   
    break
  guess = int(guess)                   
  c += 1
  if guess < random_range:                   
    print("Число больше")             
  elif guess > random_range:              
    print("Число меньше")                
  else:
    print("Правильно, Вы угадали! Случайное число равно: ", random_range)

### Решение

rd = np.random.randint(1, 9)              # Создание случайного числа от 1 до 9
guess = 0                                 # Переменная для взаимодействия с пользователем
c = 0
while guess != rd and guess != "exit":    # Пока переменная не равна заданному числу или выходу из игры
    # Запрос у пользователя нового числа
    guess = input("Enter a guess between 1 to 9 ")
    if guess == "exit":                   # Выход, если переменная равна окончанию игры
        break

    guess = int(guess)                    # Изменение типа введенных данных
    c += 1

    if guess < rd:                        # Если введенное число меньше загаданного
        print("Too low")                  # Вывод соответствующего сообщения
    elif guess > rd:                      # Если введенное число больше
        print("Too high")                 # Выводы соответствующих сообщений 
    else:
        print("Right!")                   
        print("You took only", c, "tries!")

## Задача 44

Вы являетесь руководителем отдела в крупной корпорации и список ваших сотрудников и их возрастов хранится в словаре initial_dict. За время вашего отпуска заместитель нанял некоторое количество новых людей и вся информацию о сотрудниках отдела теперь находится в словаре new_dict. Вам нужно знать имена новых людей. В окно для ответа введите список новых сотрудников, отсортированный по алфавиту.



# Исходный словарь
initial_dict = {'Юлия': 22, 'Анна': 21, 'Валерия': 24, 'Андрей': 28,
                'Игорь': 20, 'Андрей': 22, 'Марина': 20, 'Юлия':21,
                'Анастасия': 23, 'Павел': 24, 'Евгения': 26} 
# Новый словарь
new_dict = {'Юлия': 22, 'Светлана': 23, 'Анна': 21, 'Валерия': 24,
            'Андрей': 28,'Игорь': 20,'Валерия': 21, 'Андрей': 22,
            'Марина': 20,'Андрей': 24, 'Юлия':21,'Анастасия': 23,
            'Павел': 24, 'Евгения': 26} 


initial_dict = {'Юлия': 22, 'Анна': 21, 'Валерия': 24, 'Андрей': 28,
                'Игорь': 20, 'Андрей': 22, 'Марина': 20, 'Юлия':21,
                'Анастасия': 23, 'Павел': 24, 'Евгения': 26} 
new_dict = {'Юлия': 22, 'Светлана': 23, 'Анна': 21, 'Валерия': 24,
            'Андрей': 28,'Игорь': 20,'Валерия': 21, 'Андрей': 22,
            'Марина': 20,'Андрей': 24, 'Юлия':21,'Анастасия': 23,
            'Павел': 24, 'Евгения': 26}

r = set(new_dict.items()) - set(initial_dict.items())
sorted(r)

### Решение

# Создание для каждого словаря множеств и нахождение разности двух множеств
a = set(new_dict.items()) - set(initial_dict.items()) 
# Вывод новых сотрудников
print(a)
                                          
list_of_names = []                        # Создание пустого списка для имен
for i in list(a):                         # Перебор значений разности словарей
  list_of_names.append(i[0])              # Добавление имен в список
print(list_of_names)                      # Вывод результата
sorted(list_of_names)                     # Вывод имен, отсортированных по алфавиту
